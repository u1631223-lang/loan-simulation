/**
 * PDF出力ユーティリティ
 *
 * jsPDFとhtml2canvasを使用してPDFレポートを生成します。
 */

import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import type { LoanParams, LoanResult } from '@/types';
import { formatCurrency } from './loanCalculator';

/**
 * PDF生成オプション
 */
export interface PDFOptions {
  title?: string;
  author?: string;
  subject?: string;
  keywords?: string;
}

/**
 * 現在の日時を「YYYY年MM月DD日 HH:mm」形式で取得
 */
const getCurrentDateTime = (): string => {
  const now = new Date();
  return `${now.getFullYear()}年${(now.getMonth() + 1).toString().padStart(2, '0')}月${now.getDate().toString().padStart(2, '0')}日 ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
};

/**
 * PDFにヘッダーを追加
 */
const addHeader = (doc: jsPDF, title: string) => {
  doc.setFontSize(18);
  doc.text(title, 105, 20, { align: 'center' });

  // 生成日時
  doc.setFontSize(10);
  doc.text(`生成日時: ${getCurrentDateTime()}`, 200, 20, { align: 'right' });

  // 下線
  doc.setLineWidth(0.5);
  doc.line(10, 25, 200, 25);
};

/**
 * PDFにフッターを追加
 */
const addFooter = (doc: jsPDF, pageNumber: number) => {
  const pageHeight = doc.internal.pageSize.height;

  doc.setFontSize(8);
  doc.text(`Page ${pageNumber}`, 105, pageHeight - 10, { align: 'center' });
  doc.text('Generated by 住宅ローン電卓', 200, pageHeight - 10, { align: 'right' });

  // 上線
  doc.setLineWidth(0.3);
  doc.line(10, pageHeight - 15, 200, pageHeight - 15);
};

/**
 * 住宅ローンシミュレーション結果PDF
 *
 * @param result 計算結果
 * @param params 計算パラメータ
 * @param options PDF生成オプション
 */
export const generateLoanPDF = async (
  result: LoanResult,
  params: LoanParams,
  options: PDFOptions = {}
): Promise<void> => {
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4',
  });

  // PDFメタデータ
  doc.setProperties({
    title: options.title || '住宅ローンシミュレーション結果',
    author: options.author || '住宅ローン電卓',
    subject: options.subject || 'ローン計算結果',
    keywords: options.keywords || 'loan,simulation,住宅ローン',
  });

  // ページ1: サマリー
  addHeader(doc, '住宅ローンシミュレーション結果');

  let y = 35;

  // ローン条件
  doc.setFontSize(14);
  doc.text('ローン条件', 10, y);
  y += 8;

  doc.setFontSize(10);
  doc.text(`借入金額: ${formatCurrency(params.principal)}`, 15, y);
  y += 6;
  doc.text(`金利: ${params.interestRate.toFixed(2)}%`, 15, y);
  y += 6;
  doc.text(`返済期間: ${params.years}年${params.months}ヶ月`, 15, y);
  y += 6;
  doc.text(`返済方式: ${params.repaymentType === 'equal-payment' ? '元利均等返済' : '元金均等返済'}`, 15, y);
  y += 10;

  if (params.bonusPayment?.enabled) {
    doc.text(`ボーナス払い: 年${params.bonusPayment.months.length}回 ${formatCurrency(params.bonusPayment.amount)}`, 15, y);
    y += 10;
  }

  // 計算結果
  doc.setFontSize(14);
  doc.text('計算結果', 10, y);
  y += 8;

  doc.setFontSize(10);
  doc.text(`月々返済額: ${formatCurrency(result.monthlyPayment)}`, 15, y);
  y += 6;

  if (result.bonusPayment) {
    doc.text(`ボーナス返済額: ${formatCurrency(result.bonusPayment)}`, 15, y);
    y += 6;
  }

  doc.text(`総返済額: ${formatCurrency(result.totalPayment)}`, 15, y);
  y += 6;
  doc.text(`元金総額: ${formatCurrency(result.totalPrincipal)}`, 15, y);
  y += 6;
  doc.text(`利息総額: ${formatCurrency(result.totalInterest)}`, 15, y);
  y += 10;

  // 返済計画表（最初の12ヶ月と最後の12ヶ月）
  doc.setFontSize(14);
  doc.text('返済計画表（抜粋）', 10, y);
  y += 8;

  doc.setFontSize(9);
  doc.text('回数', 15, y);
  doc.text('返済額', 40, y);
  doc.text('元金', 70, y);
  doc.text('利息', 100, y);
  doc.text('残高', 130, y);
  y += 6;

  // 最初の12ヶ月
  const firstYear = result.schedule.slice(0, 12);
  firstYear.forEach((payment, index) => {
    doc.text(`${index + 1}`, 15, y);
    doc.text(formatCurrency(payment.payment), 40, y);
    doc.text(formatCurrency(payment.principal), 70, y);
    doc.text(formatCurrency(payment.interest), 100, y);
    doc.text(formatCurrency(payment.balance), 130, y);
    y += 5;
  });

  y += 5;
  doc.text('...', 15, y);
  y += 5;

  // 最後の12ヶ月
  const lastYear = result.schedule.slice(-12);
  lastYear.forEach((payment) => {
    if (y > 270) {
      addFooter(doc, 1);
      doc.addPage();
      addHeader(doc, '住宅ローンシミュレーション結果');
      y = 35;
    }

    doc.text(`${payment.month}`, 15, y);
    doc.text(formatCurrency(payment.payment), 40, y);
    doc.text(formatCurrency(payment.principal), 70, y);
    doc.text(formatCurrency(payment.interest), 100, y);
    doc.text(formatCurrency(payment.balance), 130, y);
    y += 5;
  });

  addFooter(doc, 1);

  // PDFを保存
  doc.save(`loan-simulation-${Date.now()}.pdf`);
};

/**
 * HTML要素をPDFに変換
 *
 * @param elementId HTML要素のID
 * @param filename ファイル名
 */
export const generatePDFFromElement = async (
  elementId: string,
  filename: string = 'report.pdf'
): Promise<void> => {
  const element = document.getElementById(elementId);
  if (!element) {
    throw new Error(`Element with id "${elementId}" not found`);
  }

  // HTML要素をCanvasに変換
  const canvas = await html2canvas(element, {
    scale: 2, // 高解像度
    useCORS: true,
    logging: false,
  });

  const imgData = canvas.toDataURL('image/png');
  const pdf = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4',
  });

  const pdfWidth = pdf.internal.pageSize.getWidth();
  const pdfHeight = pdf.internal.pageSize.getHeight();
  const imgWidth = canvas.width;
  const imgHeight = canvas.height;
  const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);
  const imgX = (pdfWidth - imgWidth * ratio) / 2;
  const imgY = 10;

  pdf.addImage(imgData, 'PNG', imgX, imgY, imgWidth * ratio, imgHeight * ratio);
  pdf.save(filename);
};

/**
 * ライフプランPDF（仮実装）
 *
 * 注: Phase 13-16のライフプラン機能が完成後に詳細実装予定
 */
export const generateLifePlanPDF = async (
  _plan: unknown,
  events: unknown[],
  cashFlows: unknown[]
): Promise<void> => {
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4',
  });

  addHeader(doc, 'ライフプランシミュレーション');

  doc.setFontSize(12);
  doc.text('ライフプラン詳細は現在開発中です。', 10, 40);
  doc.text(`イベント数: ${events.length}`, 10, 50);
  doc.text(`キャッシュフロー数: ${cashFlows.length}`, 10, 60);

  addFooter(doc, 1);
  doc.save(`life-plan-${Date.now()}.pdf`);
};

/**
 * 家計収支PDF（仮実装）
 */
export const generateBudgetPDF = async (
  _budget: unknown,
  incomes: unknown[],
  expenses: unknown[]
): Promise<void> => {
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4',
  });

  addHeader(doc, '家計収支シミュレーション');

  doc.setFontSize(12);
  doc.text('家計収支詳細は現在開発中です。', 10, 40);
  doc.text(`収入項目数: ${incomes.length}`, 10, 50);
  doc.text(`支出項目数: ${expenses.length}`, 10, 60);

  addFooter(doc, 1);
  doc.save(`budget-${Date.now()}.pdf`);
};

/**
 * 資産運用シミュレーションPDF（仮実装）
 */
export const generateAssetPDF = async (
  _portfolio: unknown,
  _simulation: unknown
): Promise<void> => {
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4',
  });

  addHeader(doc, '資産運用シミュレーション');

  doc.setFontSize(12);
  doc.text('資産運用詳細は現在開発中です。', 10, 40);

  addFooter(doc, 1);
  doc.save(`asset-${Date.now()}.pdf`);
};

/**
 * 保険設計PDF（仮実装）
 */
export const generateInsurancePDF = async (
  _plan: unknown,
  _analysis: unknown
): Promise<void> => {
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4',
  });

  addHeader(doc, '保険設計シミュレーション');

  doc.setFontSize(12);
  doc.text('保険設計詳細は現在開発中です。', 10, 40);

  addFooter(doc, 1);
  doc.save(`insurance-${Date.now()}.pdf`);
};

/**
 * 統合レポートPDF（仮実装）
 */
export const generateComprehensiveReportPDF = async (
  _allData: unknown
): Promise<void> => {
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4',
  });

  addHeader(doc, 'FPツール統合レポート');

  doc.setFontSize(12);
  doc.text('統合レポートは現在開発中です。', 10, 40);
  doc.text('Phase 10-18完了後に完全版が利用可能になります。', 10, 50);

  addFooter(doc, 1);
  doc.save(`comprehensive-report-${Date.now()}.pdf`);
};
